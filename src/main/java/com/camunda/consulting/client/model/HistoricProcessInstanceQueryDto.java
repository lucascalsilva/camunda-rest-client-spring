/*
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.camunda.consulting.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.camunda.consulting.client.model.HistoricProcessInstanceQueryDtoSorting;
import com.camunda.consulting.client.model.VariableQueryParameterDto;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * A historic process instance query which defines a group of historic process instances
 */
@ApiModel(description = "A historic process instance query which defines a group of historic process instances")
@JsonPropertyOrder({
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_PROCESS_INSTANCE_ID,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_PROCESS_INSTANCE_IDS,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_PROCESS_DEFINITION_ID,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_PROCESS_DEFINITION_KEY,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_PROCESS_DEFINITION_KEY_IN,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_PROCESS_DEFINITION_NAME,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_PROCESS_DEFINITION_NAME_LIKE,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_PROCESS_DEFINITION_KEY_NOT_IN,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY_LIKE,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_ROOT_PROCESS_INSTANCES,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_FINISHED,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_UNFINISHED,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_WITH_INCIDENTS,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_WITH_ROOT_INCIDENTS,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_INCIDENT_TYPE,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_INCIDENT_STATUS,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_INCIDENT_MESSAGE,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_INCIDENT_MESSAGE_LIKE,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_STARTED_BEFORE,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_STARTED_AFTER,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_FINISHED_BEFORE,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_FINISHED_AFTER,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_EXECUTED_ACTIVITY_AFTER,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_EXECUTED_ACTIVITY_BEFORE,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_EXECUTED_JOB_AFTER,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_EXECUTED_JOB_BEFORE,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_STARTED_BY,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_SUPER_PROCESS_INSTANCE_ID,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_SUB_PROCESS_INSTANCE_ID,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_SUPER_CASE_INSTANCE_ID,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_SUB_CASE_INSTANCE_ID,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_CASE_INSTANCE_ID,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_TENANT_ID_IN,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_WITHOUT_TENANT_ID,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_EXECUTED_ACTIVITY_ID_IN,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_ACTIVE_ACTIVITY_ID_IN,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_ACTIVE,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_SUSPENDED,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_COMPLETED,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_EXTERNALLY_TERMINATED,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_INTERNALLY_TERMINATED,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_VARIABLES,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_VARIABLE_NAMES_IGNORE_CASE,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_VARIABLE_VALUES_IGNORE_CASE,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_OR_QUERIES,
  HistoricProcessInstanceQueryDto.JSON_PROPERTY_SORTING
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-09-20T14:06:02.786934+02:00[Europe/Berlin]")
public class HistoricProcessInstanceQueryDto {
  public static final String JSON_PROPERTY_PROCESS_INSTANCE_ID = "processInstanceId";
  private String processInstanceId;

  public static final String JSON_PROPERTY_PROCESS_INSTANCE_IDS = "processInstanceIds";
  private List<String> processInstanceIds = null;

  public static final String JSON_PROPERTY_PROCESS_DEFINITION_ID = "processDefinitionId";
  private String processDefinitionId;

  public static final String JSON_PROPERTY_PROCESS_DEFINITION_KEY = "processDefinitionKey";
  private String processDefinitionKey;

  public static final String JSON_PROPERTY_PROCESS_DEFINITION_KEY_IN = "processDefinitionKeyIn";
  private List<String> processDefinitionKeyIn = null;

  public static final String JSON_PROPERTY_PROCESS_DEFINITION_NAME = "processDefinitionName";
  private String processDefinitionName;

  public static final String JSON_PROPERTY_PROCESS_DEFINITION_NAME_LIKE = "processDefinitionNameLike";
  private String processDefinitionNameLike;

  public static final String JSON_PROPERTY_PROCESS_DEFINITION_KEY_NOT_IN = "processDefinitionKeyNotIn";
  private List<String> processDefinitionKeyNotIn = null;

  public static final String JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY = "processInstanceBusinessKey";
  private String processInstanceBusinessKey;

  public static final String JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY_LIKE = "processInstanceBusinessKeyLike";
  private String processInstanceBusinessKeyLike;

  public static final String JSON_PROPERTY_ROOT_PROCESS_INSTANCES = "rootProcessInstances";
  private JsonNullable<Boolean> rootProcessInstances = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_FINISHED = "finished";
  private JsonNullable<Boolean> finished = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_UNFINISHED = "unfinished";
  private JsonNullable<Boolean> unfinished = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_WITH_INCIDENTS = "withIncidents";
  private JsonNullable<Boolean> withIncidents = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_WITH_ROOT_INCIDENTS = "withRootIncidents";
  private JsonNullable<Boolean> withRootIncidents = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_INCIDENT_TYPE = "incidentType";
  private String incidentType;

  /**
   * Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
   */
  public enum IncidentStatusEnum {
    OPEN("open"),
    
    RESOLVED("resolved");

    private String value;

    IncidentStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IncidentStatusEnum fromValue(String value) {
      for (IncidentStatusEnum b : IncidentStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INCIDENT_STATUS = "incidentStatus";
  private IncidentStatusEnum incidentStatus;

  public static final String JSON_PROPERTY_INCIDENT_MESSAGE = "incidentMessage";
  private String incidentMessage;

  public static final String JSON_PROPERTY_INCIDENT_MESSAGE_LIKE = "incidentMessageLike";
  private String incidentMessageLike;

  public static final String JSON_PROPERTY_STARTED_BEFORE = "startedBefore";
  private JsonNullable<OffsetDateTime> startedBefore = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_STARTED_AFTER = "startedAfter";
  private JsonNullable<OffsetDateTime> startedAfter = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_FINISHED_BEFORE = "finishedBefore";
  private JsonNullable<OffsetDateTime> finishedBefore = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_FINISHED_AFTER = "finishedAfter";
  private JsonNullable<OffsetDateTime> finishedAfter = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_EXECUTED_ACTIVITY_AFTER = "executedActivityAfter";
  private JsonNullable<OffsetDateTime> executedActivityAfter = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_EXECUTED_ACTIVITY_BEFORE = "executedActivityBefore";
  private JsonNullable<OffsetDateTime> executedActivityBefore = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_EXECUTED_JOB_AFTER = "executedJobAfter";
  private JsonNullable<OffsetDateTime> executedJobAfter = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_EXECUTED_JOB_BEFORE = "executedJobBefore";
  private JsonNullable<OffsetDateTime> executedJobBefore = JsonNullable.<OffsetDateTime>undefined();

  public static final String JSON_PROPERTY_STARTED_BY = "startedBy";
  private String startedBy;

  public static final String JSON_PROPERTY_SUPER_PROCESS_INSTANCE_ID = "superProcessInstanceId";
  private String superProcessInstanceId;

  public static final String JSON_PROPERTY_SUB_PROCESS_INSTANCE_ID = "subProcessInstanceId";
  private String subProcessInstanceId;

  public static final String JSON_PROPERTY_SUPER_CASE_INSTANCE_ID = "superCaseInstanceId";
  private String superCaseInstanceId;

  public static final String JSON_PROPERTY_SUB_CASE_INSTANCE_ID = "subCaseInstanceId";
  private String subCaseInstanceId;

  public static final String JSON_PROPERTY_CASE_INSTANCE_ID = "caseInstanceId";
  private String caseInstanceId;

  public static final String JSON_PROPERTY_TENANT_ID_IN = "tenantIdIn";
  private List<String> tenantIdIn = null;

  public static final String JSON_PROPERTY_WITHOUT_TENANT_ID = "withoutTenantId";
  private JsonNullable<Boolean> withoutTenantId = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_EXECUTED_ACTIVITY_ID_IN = "executedActivityIdIn";
  private List<String> executedActivityIdIn = null;

  public static final String JSON_PROPERTY_ACTIVE_ACTIVITY_ID_IN = "activeActivityIdIn";
  private List<String> activeActivityIdIn = null;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private JsonNullable<Boolean> active = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_SUSPENDED = "suspended";
  private JsonNullable<Boolean> suspended = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_COMPLETED = "completed";
  private JsonNullable<Boolean> completed = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_EXTERNALLY_TERMINATED = "externallyTerminated";
  private JsonNullable<Boolean> externallyTerminated = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_INTERNALLY_TERMINATED = "internallyTerminated";
  private JsonNullable<Boolean> internallyTerminated = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_VARIABLES = "variables";
  private List<VariableQueryParameterDto> variables = null;

  public static final String JSON_PROPERTY_VARIABLE_NAMES_IGNORE_CASE = "variableNamesIgnoreCase";
  private JsonNullable<Boolean> variableNamesIgnoreCase = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_VARIABLE_VALUES_IGNORE_CASE = "variableValuesIgnoreCase";
  private JsonNullable<Boolean> variableValuesIgnoreCase = JsonNullable.<Boolean>undefined();

  public static final String JSON_PROPERTY_OR_QUERIES = "orQueries";
  private List<HistoricProcessInstanceQueryDto> orQueries = null;

  public static final String JSON_PROPERTY_SORTING = "sorting";
  private List<HistoricProcessInstanceQueryDtoSorting> sorting = null;


  public HistoricProcessInstanceQueryDto processInstanceId(String processInstanceId) {
    
    this.processInstanceId = processInstanceId;
    return this;
  }

   /**
   * Filter by process instance id.
   * @return processInstanceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter by process instance id.")
  @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessInstanceId() {
    return processInstanceId;
  }


  public void setProcessInstanceId(String processInstanceId) {
    this.processInstanceId = processInstanceId;
  }


  public HistoricProcessInstanceQueryDto processInstanceIds(List<String> processInstanceIds) {
    
    this.processInstanceIds = processInstanceIds;
    return this;
  }

  public HistoricProcessInstanceQueryDto addProcessInstanceIdsItem(String processInstanceIdsItem) {
    if (this.processInstanceIds == null) {
      this.processInstanceIds = new ArrayList<String>();
    }
    this.processInstanceIds.add(processInstanceIdsItem);
    return this;
  }

   /**
   * Filter by process instance ids. Must be a JSON array process instance ids.
   * @return processInstanceIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter by process instance ids. Must be a JSON array process instance ids.")
  @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getProcessInstanceIds() {
    return processInstanceIds;
  }


  public void setProcessInstanceIds(List<String> processInstanceIds) {
    this.processInstanceIds = processInstanceIds;
  }


  public HistoricProcessInstanceQueryDto processDefinitionId(String processDefinitionId) {
    
    this.processDefinitionId = processDefinitionId;
    return this;
  }

   /**
   * Filter by the process definition the instances run on.
   * @return processDefinitionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter by the process definition the instances run on.")
  @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessDefinitionId() {
    return processDefinitionId;
  }


  public void setProcessDefinitionId(String processDefinitionId) {
    this.processDefinitionId = processDefinitionId;
  }


  public HistoricProcessInstanceQueryDto processDefinitionKey(String processDefinitionKey) {
    
    this.processDefinitionKey = processDefinitionKey;
    return this;
  }

   /**
   * Filter by the key of the process definition the instances run on.
   * @return processDefinitionKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter by the key of the process definition the instances run on.")
  @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessDefinitionKey() {
    return processDefinitionKey;
  }


  public void setProcessDefinitionKey(String processDefinitionKey) {
    this.processDefinitionKey = processDefinitionKey;
  }


  public HistoricProcessInstanceQueryDto processDefinitionKeyIn(List<String> processDefinitionKeyIn) {
    
    this.processDefinitionKeyIn = processDefinitionKeyIn;
    return this;
  }

  public HistoricProcessInstanceQueryDto addProcessDefinitionKeyInItem(String processDefinitionKeyInItem) {
    if (this.processDefinitionKeyIn == null) {
      this.processDefinitionKeyIn = new ArrayList<String>();
    }
    this.processDefinitionKeyIn.add(processDefinitionKeyInItem);
    return this;
  }

   /**
   * Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Must be a JSON array of Strings.
   * @return processDefinitionKeyIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Must be a JSON array of Strings.")
  @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_KEY_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getProcessDefinitionKeyIn() {
    return processDefinitionKeyIn;
  }


  public void setProcessDefinitionKeyIn(List<String> processDefinitionKeyIn) {
    this.processDefinitionKeyIn = processDefinitionKeyIn;
  }


  public HistoricProcessInstanceQueryDto processDefinitionName(String processDefinitionName) {
    
    this.processDefinitionName = processDefinitionName;
    return this;
  }

   /**
   * Filter by the name of the process definition the instances run on.
   * @return processDefinitionName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter by the name of the process definition the instances run on.")
  @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessDefinitionName() {
    return processDefinitionName;
  }


  public void setProcessDefinitionName(String processDefinitionName) {
    this.processDefinitionName = processDefinitionName;
  }


  public HistoricProcessInstanceQueryDto processDefinitionNameLike(String processDefinitionNameLike) {
    
    this.processDefinitionNameLike = processDefinitionNameLike;
    return this;
  }

   /**
   * Filter by process definition names that the parameter is a substring of.
   * @return processDefinitionNameLike
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter by process definition names that the parameter is a substring of.")
  @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_NAME_LIKE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessDefinitionNameLike() {
    return processDefinitionNameLike;
  }


  public void setProcessDefinitionNameLike(String processDefinitionNameLike) {
    this.processDefinitionNameLike = processDefinitionNameLike;
  }


  public HistoricProcessInstanceQueryDto processDefinitionKeyNotIn(List<String> processDefinitionKeyNotIn) {
    
    this.processDefinitionKeyNotIn = processDefinitionKeyNotIn;
    return this;
  }

  public HistoricProcessInstanceQueryDto addProcessDefinitionKeyNotInItem(String processDefinitionKeyNotInItem) {
    if (this.processDefinitionKeyNotIn == null) {
      this.processDefinitionKeyNotIn = new ArrayList<String>();
    }
    this.processDefinitionKeyNotIn.add(processDefinitionKeyNotInItem);
    return this;
  }

   /**
   * Exclude instances that belong to a set of process definitions. Must be a JSON array of process definition keys.
   * @return processDefinitionKeyNotIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Exclude instances that belong to a set of process definitions. Must be a JSON array of process definition keys.")
  @JsonProperty(JSON_PROPERTY_PROCESS_DEFINITION_KEY_NOT_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getProcessDefinitionKeyNotIn() {
    return processDefinitionKeyNotIn;
  }


  public void setProcessDefinitionKeyNotIn(List<String> processDefinitionKeyNotIn) {
    this.processDefinitionKeyNotIn = processDefinitionKeyNotIn;
  }


  public HistoricProcessInstanceQueryDto processInstanceBusinessKey(String processInstanceBusinessKey) {
    
    this.processInstanceBusinessKey = processInstanceBusinessKey;
    return this;
  }

   /**
   * Filter by process instance business key.
   * @return processInstanceBusinessKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter by process instance business key.")
  @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessInstanceBusinessKey() {
    return processInstanceBusinessKey;
  }


  public void setProcessInstanceBusinessKey(String processInstanceBusinessKey) {
    this.processInstanceBusinessKey = processInstanceBusinessKey;
  }


  public HistoricProcessInstanceQueryDto processInstanceBusinessKeyLike(String processInstanceBusinessKeyLike) {
    
    this.processInstanceBusinessKeyLike = processInstanceBusinessKeyLike;
    return this;
  }

   /**
   * Filter by process instance business key that the parameter is a substring of.
   * @return processInstanceBusinessKeyLike
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter by process instance business key that the parameter is a substring of.")
  @JsonProperty(JSON_PROPERTY_PROCESS_INSTANCE_BUSINESS_KEY_LIKE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessInstanceBusinessKeyLike() {
    return processInstanceBusinessKeyLike;
  }


  public void setProcessInstanceBusinessKeyLike(String processInstanceBusinessKeyLike) {
    this.processInstanceBusinessKeyLike = processInstanceBusinessKeyLike;
  }


  public HistoricProcessInstanceQueryDto rootProcessInstances(Boolean rootProcessInstances) {
    this.rootProcessInstances = JsonNullable.<Boolean>of(rootProcessInstances);
    
    return this;
  }

   /**
   * Restrict the query to all process instances that are top level process instances.
   * @return rootProcessInstances
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict the query to all process instances that are top level process instances.")
  @JsonIgnore

  public Boolean getRootProcessInstances() {
        return rootProcessInstances.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ROOT_PROCESS_INSTANCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getRootProcessInstances_JsonNullable() {
    return rootProcessInstances;
  }
  
  @JsonProperty(JSON_PROPERTY_ROOT_PROCESS_INSTANCES)
  public void setRootProcessInstances_JsonNullable(JsonNullable<Boolean> rootProcessInstances) {
    this.rootProcessInstances = rootProcessInstances;
  }

  public void setRootProcessInstances(Boolean rootProcessInstances) {
    this.rootProcessInstances = JsonNullable.<Boolean>of(rootProcessInstances);
  }


  public HistoricProcessInstanceQueryDto finished(Boolean finished) {
    this.finished = JsonNullable.<Boolean>of(finished);
    
    return this;
  }

   /**
   * Only include finished process instances. Value may only be true, as false is the default behavior.
   * @return finished
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only include finished process instances. Value may only be true, as false is the default behavior.")
  @JsonIgnore

  public Boolean getFinished() {
        return finished.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FINISHED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getFinished_JsonNullable() {
    return finished;
  }
  
  @JsonProperty(JSON_PROPERTY_FINISHED)
  public void setFinished_JsonNullable(JsonNullable<Boolean> finished) {
    this.finished = finished;
  }

  public void setFinished(Boolean finished) {
    this.finished = JsonNullable.<Boolean>of(finished);
  }


  public HistoricProcessInstanceQueryDto unfinished(Boolean unfinished) {
    this.unfinished = JsonNullable.<Boolean>of(unfinished);
    
    return this;
  }

   /**
   * Only include unfinished process instances. Value may only be true, as false is the default behavior.
   * @return unfinished
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only include unfinished process instances. Value may only be true, as false is the default behavior.")
  @JsonIgnore

  public Boolean getUnfinished() {
        return unfinished.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_UNFINISHED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getUnfinished_JsonNullable() {
    return unfinished;
  }
  
  @JsonProperty(JSON_PROPERTY_UNFINISHED)
  public void setUnfinished_JsonNullable(JsonNullable<Boolean> unfinished) {
    this.unfinished = unfinished;
  }

  public void setUnfinished(Boolean unfinished) {
    this.unfinished = JsonNullable.<Boolean>of(unfinished);
  }


  public HistoricProcessInstanceQueryDto withIncidents(Boolean withIncidents) {
    this.withIncidents = JsonNullable.<Boolean>of(withIncidents);
    
    return this;
  }

   /**
   * Only include process instances which have an incident. Value may only be true, as false is the default behavior.
   * @return withIncidents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only include process instances which have an incident. Value may only be true, as false is the default behavior.")
  @JsonIgnore

  public Boolean getWithIncidents() {
        return withIncidents.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WITH_INCIDENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getWithIncidents_JsonNullable() {
    return withIncidents;
  }
  
  @JsonProperty(JSON_PROPERTY_WITH_INCIDENTS)
  public void setWithIncidents_JsonNullable(JsonNullable<Boolean> withIncidents) {
    this.withIncidents = withIncidents;
  }

  public void setWithIncidents(Boolean withIncidents) {
    this.withIncidents = JsonNullable.<Boolean>of(withIncidents);
  }


  public HistoricProcessInstanceQueryDto withRootIncidents(Boolean withRootIncidents) {
    this.withRootIncidents = JsonNullable.<Boolean>of(withRootIncidents);
    
    return this;
  }

   /**
   * Only include process instances which have a root incident. Value may only be true, as false is the default behavior.
   * @return withRootIncidents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only include process instances which have a root incident. Value may only be true, as false is the default behavior.")
  @JsonIgnore

  public Boolean getWithRootIncidents() {
        return withRootIncidents.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WITH_ROOT_INCIDENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getWithRootIncidents_JsonNullable() {
    return withRootIncidents;
  }
  
  @JsonProperty(JSON_PROPERTY_WITH_ROOT_INCIDENTS)
  public void setWithRootIncidents_JsonNullable(JsonNullable<Boolean> withRootIncidents) {
    this.withRootIncidents = withRootIncidents;
  }

  public void setWithRootIncidents(Boolean withRootIncidents) {
    this.withRootIncidents = JsonNullable.<Boolean>of(withRootIncidents);
  }


  public HistoricProcessInstanceQueryDto incidentType(String incidentType) {
    
    this.incidentType = incidentType;
    return this;
  }

   /**
   * Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. 
   * @return incidentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/incidents/#incident-types) for a list of incident types. ")
  @JsonProperty(JSON_PROPERTY_INCIDENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIncidentType() {
    return incidentType;
  }


  public void setIncidentType(String incidentType) {
    this.incidentType = incidentType;
  }


  public HistoricProcessInstanceQueryDto incidentStatus(IncidentStatusEnum incidentStatus) {
    
    this.incidentStatus = incidentStatus;
    return this;
  }

   /**
   * Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.
   * @return incidentStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents.")
  @JsonProperty(JSON_PROPERTY_INCIDENT_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IncidentStatusEnum getIncidentStatus() {
    return incidentStatus;
  }


  public void setIncidentStatus(IncidentStatusEnum incidentStatus) {
    this.incidentStatus = incidentStatus;
  }


  public HistoricProcessInstanceQueryDto incidentMessage(String incidentMessage) {
    
    this.incidentMessage = incidentMessage;
    return this;
  }

   /**
   * Filter by the incident message. Exact match.
   * @return incidentMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter by the incident message. Exact match.")
  @JsonProperty(JSON_PROPERTY_INCIDENT_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIncidentMessage() {
    return incidentMessage;
  }


  public void setIncidentMessage(String incidentMessage) {
    this.incidentMessage = incidentMessage;
  }


  public HistoricProcessInstanceQueryDto incidentMessageLike(String incidentMessageLike) {
    
    this.incidentMessageLike = incidentMessageLike;
    return this;
  }

   /**
   * Filter by the incident message that the parameter is a substring of.
   * @return incidentMessageLike
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter by the incident message that the parameter is a substring of.")
  @JsonProperty(JSON_PROPERTY_INCIDENT_MESSAGE_LIKE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIncidentMessageLike() {
    return incidentMessageLike;
  }


  public void setIncidentMessageLike(String incidentMessageLike) {
    this.incidentMessageLike = incidentMessageLike;
  }


  public HistoricProcessInstanceQueryDto startedBefore(OffsetDateTime startedBefore) {
    this.startedBefore = JsonNullable.<OffsetDateTime>of(startedBefore);
    
    return this;
  }

   /**
   * Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
   * @return startedBefore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.")
  @JsonIgnore

  public OffsetDateTime getStartedBefore() {
        return startedBefore.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STARTED_BEFORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getStartedBefore_JsonNullable() {
    return startedBefore;
  }
  
  @JsonProperty(JSON_PROPERTY_STARTED_BEFORE)
  public void setStartedBefore_JsonNullable(JsonNullable<OffsetDateTime> startedBefore) {
    this.startedBefore = startedBefore;
  }

  public void setStartedBefore(OffsetDateTime startedBefore) {
    this.startedBefore = JsonNullable.<OffsetDateTime>of(startedBefore);
  }


  public HistoricProcessInstanceQueryDto startedAfter(OffsetDateTime startedAfter) {
    this.startedAfter = JsonNullable.<OffsetDateTime>of(startedAfter);
    
    return this;
  }

   /**
   * Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
   * @return startedAfter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.")
  @JsonIgnore

  public OffsetDateTime getStartedAfter() {
        return startedAfter.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STARTED_AFTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getStartedAfter_JsonNullable() {
    return startedAfter;
  }
  
  @JsonProperty(JSON_PROPERTY_STARTED_AFTER)
  public void setStartedAfter_JsonNullable(JsonNullable<OffsetDateTime> startedAfter) {
    this.startedAfter = startedAfter;
  }

  public void setStartedAfter(OffsetDateTime startedAfter) {
    this.startedAfter = JsonNullable.<OffsetDateTime>of(startedAfter);
  }


  public HistoricProcessInstanceQueryDto finishedBefore(OffsetDateTime finishedBefore) {
    this.finishedBefore = JsonNullable.<OffsetDateTime>of(finishedBefore);
    
    return this;
  }

   /**
   * Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
   * @return finishedBefore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.")
  @JsonIgnore

  public OffsetDateTime getFinishedBefore() {
        return finishedBefore.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FINISHED_BEFORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getFinishedBefore_JsonNullable() {
    return finishedBefore;
  }
  
  @JsonProperty(JSON_PROPERTY_FINISHED_BEFORE)
  public void setFinishedBefore_JsonNullable(JsonNullable<OffsetDateTime> finishedBefore) {
    this.finishedBefore = finishedBefore;
  }

  public void setFinishedBefore(OffsetDateTime finishedBefore) {
    this.finishedBefore = JsonNullable.<OffsetDateTime>of(finishedBefore);
  }


  public HistoricProcessInstanceQueryDto finishedAfter(OffsetDateTime finishedAfter) {
    this.finishedAfter = JsonNullable.<OffsetDateTime>of(finishedAfter);
    
    return this;
  }

   /**
   * Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
   * @return finishedAfter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.")
  @JsonIgnore

  public OffsetDateTime getFinishedAfter() {
        return finishedAfter.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FINISHED_AFTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getFinishedAfter_JsonNullable() {
    return finishedAfter;
  }
  
  @JsonProperty(JSON_PROPERTY_FINISHED_AFTER)
  public void setFinishedAfter_JsonNullable(JsonNullable<OffsetDateTime> finishedAfter) {
    this.finishedAfter = finishedAfter;
  }

  public void setFinishedAfter(OffsetDateTime finishedAfter) {
    this.finishedAfter = JsonNullable.<OffsetDateTime>of(finishedAfter);
  }


  public HistoricProcessInstanceQueryDto executedActivityAfter(OffsetDateTime executedActivityAfter) {
    this.executedActivityAfter = JsonNullable.<OffsetDateTime>of(executedActivityAfter);
    
    return this;
  }

   /**
   * Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
   * @return executedActivityAfter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.")
  @JsonIgnore

  public OffsetDateTime getExecutedActivityAfter() {
        return executedActivityAfter.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXECUTED_ACTIVITY_AFTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getExecutedActivityAfter_JsonNullable() {
    return executedActivityAfter;
  }
  
  @JsonProperty(JSON_PROPERTY_EXECUTED_ACTIVITY_AFTER)
  public void setExecutedActivityAfter_JsonNullable(JsonNullable<OffsetDateTime> executedActivityAfter) {
    this.executedActivityAfter = executedActivityAfter;
  }

  public void setExecutedActivityAfter(OffsetDateTime executedActivityAfter) {
    this.executedActivityAfter = JsonNullable.<OffsetDateTime>of(executedActivityAfter);
  }


  public HistoricProcessInstanceQueryDto executedActivityBefore(OffsetDateTime executedActivityBefore) {
    this.executedActivityBefore = JsonNullable.<OffsetDateTime>of(executedActivityBefore);
    
    return this;
  }

   /**
   * Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
   * @return executedActivityBefore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.")
  @JsonIgnore

  public OffsetDateTime getExecutedActivityBefore() {
        return executedActivityBefore.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXECUTED_ACTIVITY_BEFORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getExecutedActivityBefore_JsonNullable() {
    return executedActivityBefore;
  }
  
  @JsonProperty(JSON_PROPERTY_EXECUTED_ACTIVITY_BEFORE)
  public void setExecutedActivityBefore_JsonNullable(JsonNullable<OffsetDateTime> executedActivityBefore) {
    this.executedActivityBefore = executedActivityBefore;
  }

  public void setExecutedActivityBefore(OffsetDateTime executedActivityBefore) {
    this.executedActivityBefore = JsonNullable.<OffsetDateTime>of(executedActivityBefore);
  }


  public HistoricProcessInstanceQueryDto executedJobAfter(OffsetDateTime executedJobAfter) {
    this.executedJobAfter = JsonNullable.<OffsetDateTime>of(executedJobAfter);
    
    return this;
  }

   /**
   * Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
   * @return executedJobAfter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.")
  @JsonIgnore

  public OffsetDateTime getExecutedJobAfter() {
        return executedJobAfter.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXECUTED_JOB_AFTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getExecutedJobAfter_JsonNullable() {
    return executedJobAfter;
  }
  
  @JsonProperty(JSON_PROPERTY_EXECUTED_JOB_AFTER)
  public void setExecutedJobAfter_JsonNullable(JsonNullable<OffsetDateTime> executedJobAfter) {
    this.executedJobAfter = executedJobAfter;
  }

  public void setExecutedJobAfter(OffsetDateTime executedJobAfter) {
    this.executedJobAfter = JsonNullable.<OffsetDateTime>of(executedJobAfter);
  }


  public HistoricProcessInstanceQueryDto executedJobBefore(OffsetDateTime executedJobBefore) {
    this.executedJobBefore = JsonNullable.<OffsetDateTime>of(executedJobBefore);
    
    return this;
  }

   /**
   * Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.
   * @return executedJobBefore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.13/reference/rest/overview/date-format/), the date must have the format yyyy-MM-dd'T'HH:mm:ss.SSSZ, e.g., 2013-01-23T14:42:45.000+0200.")
  @JsonIgnore

  public OffsetDateTime getExecutedJobBefore() {
        return executedJobBefore.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXECUTED_JOB_BEFORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<OffsetDateTime> getExecutedJobBefore_JsonNullable() {
    return executedJobBefore;
  }
  
  @JsonProperty(JSON_PROPERTY_EXECUTED_JOB_BEFORE)
  public void setExecutedJobBefore_JsonNullable(JsonNullable<OffsetDateTime> executedJobBefore) {
    this.executedJobBefore = executedJobBefore;
  }

  public void setExecutedJobBefore(OffsetDateTime executedJobBefore) {
    this.executedJobBefore = JsonNullable.<OffsetDateTime>of(executedJobBefore);
  }


  public HistoricProcessInstanceQueryDto startedBy(String startedBy) {
    
    this.startedBy = startedBy;
    return this;
  }

   /**
   * Only include process instances that were started by the given user.
   * @return startedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only include process instances that were started by the given user.")
  @JsonProperty(JSON_PROPERTY_STARTED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStartedBy() {
    return startedBy;
  }


  public void setStartedBy(String startedBy) {
    this.startedBy = startedBy;
  }


  public HistoricProcessInstanceQueryDto superProcessInstanceId(String superProcessInstanceId) {
    
    this.superProcessInstanceId = superProcessInstanceId;
    return this;
  }

   /**
   * Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
   * @return superProcessInstanceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.")
  @JsonProperty(JSON_PROPERTY_SUPER_PROCESS_INSTANCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSuperProcessInstanceId() {
    return superProcessInstanceId;
  }


  public void setSuperProcessInstanceId(String superProcessInstanceId) {
    this.superProcessInstanceId = superProcessInstanceId;
  }


  public HistoricProcessInstanceQueryDto subProcessInstanceId(String subProcessInstanceId) {
    
    this.subProcessInstanceId = subProcessInstanceId;
    return this;
  }

   /**
   * Restrict query to one process instance that has a sub process instance with the given id.
   * @return subProcessInstanceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict query to one process instance that has a sub process instance with the given id.")
  @JsonProperty(JSON_PROPERTY_SUB_PROCESS_INSTANCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubProcessInstanceId() {
    return subProcessInstanceId;
  }


  public void setSubProcessInstanceId(String subProcessInstanceId) {
    this.subProcessInstanceId = subProcessInstanceId;
  }


  public HistoricProcessInstanceQueryDto superCaseInstanceId(String superCaseInstanceId) {
    
    this.superCaseInstanceId = superCaseInstanceId;
    return this;
  }

   /**
   * Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
   * @return superCaseInstanceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.")
  @JsonProperty(JSON_PROPERTY_SUPER_CASE_INSTANCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSuperCaseInstanceId() {
    return superCaseInstanceId;
  }


  public void setSuperCaseInstanceId(String superCaseInstanceId) {
    this.superCaseInstanceId = superCaseInstanceId;
  }


  public HistoricProcessInstanceQueryDto subCaseInstanceId(String subCaseInstanceId) {
    
    this.subCaseInstanceId = subCaseInstanceId;
    return this;
  }

   /**
   * Restrict query to one process instance that has a sub case instance with the given id.
   * @return subCaseInstanceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict query to one process instance that has a sub case instance with the given id.")
  @JsonProperty(JSON_PROPERTY_SUB_CASE_INSTANCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubCaseInstanceId() {
    return subCaseInstanceId;
  }


  public void setSubCaseInstanceId(String subCaseInstanceId) {
    this.subCaseInstanceId = subCaseInstanceId;
  }


  public HistoricProcessInstanceQueryDto caseInstanceId(String caseInstanceId) {
    
    this.caseInstanceId = caseInstanceId;
    return this;
  }

   /**
   * Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
   * @return caseInstanceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.")
  @JsonProperty(JSON_PROPERTY_CASE_INSTANCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCaseInstanceId() {
    return caseInstanceId;
  }


  public void setCaseInstanceId(String caseInstanceId) {
    this.caseInstanceId = caseInstanceId;
  }


  public HistoricProcessInstanceQueryDto tenantIdIn(List<String> tenantIdIn) {
    
    this.tenantIdIn = tenantIdIn;
    return this;
  }

  public HistoricProcessInstanceQueryDto addTenantIdInItem(String tenantIdInItem) {
    if (this.tenantIdIn == null) {
      this.tenantIdIn = new ArrayList<String>();
    }
    this.tenantIdIn.add(tenantIdInItem);
    return this;
  }

   /**
   * Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of Strings.
   * @return tenantIdIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of Strings.")
  @JsonProperty(JSON_PROPERTY_TENANT_ID_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getTenantIdIn() {
    return tenantIdIn;
  }


  public void setTenantIdIn(List<String> tenantIdIn) {
    this.tenantIdIn = tenantIdIn;
  }


  public HistoricProcessInstanceQueryDto withoutTenantId(Boolean withoutTenantId) {
    this.withoutTenantId = JsonNullable.<Boolean>of(withoutTenantId);
    
    return this;
  }

   /**
   * Only include historic process instances which belong to no tenant. Value may only be true, as false is the default behavior.
   * @return withoutTenantId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Only include historic process instances which belong to no tenant. Value may only be true, as false is the default behavior.")
  @JsonIgnore

  public Boolean getWithoutTenantId() {
        return withoutTenantId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WITHOUT_TENANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getWithoutTenantId_JsonNullable() {
    return withoutTenantId;
  }
  
  @JsonProperty(JSON_PROPERTY_WITHOUT_TENANT_ID)
  public void setWithoutTenantId_JsonNullable(JsonNullable<Boolean> withoutTenantId) {
    this.withoutTenantId = withoutTenantId;
  }

  public void setWithoutTenantId(Boolean withoutTenantId) {
    this.withoutTenantId = JsonNullable.<Boolean>of(withoutTenantId);
  }


  public HistoricProcessInstanceQueryDto executedActivityIdIn(List<String> executedActivityIdIn) {
    
    this.executedActivityIdIn = executedActivityIdIn;
    return this;
  }

  public HistoricProcessInstanceQueryDto addExecutedActivityIdInItem(String executedActivityIdInItem) {
    if (this.executedActivityIdIn == null) {
      this.executedActivityIdIn = new ArrayList<String>();
    }
    this.executedActivityIdIn.add(executedActivityIdInItem);
    return this;
  }

   /**
   * Restrict to instances that executed an activity with one of given ids.
   * @return executedActivityIdIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict to instances that executed an activity with one of given ids.")
  @JsonProperty(JSON_PROPERTY_EXECUTED_ACTIVITY_ID_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getExecutedActivityIdIn() {
    return executedActivityIdIn;
  }


  public void setExecutedActivityIdIn(List<String> executedActivityIdIn) {
    this.executedActivityIdIn = executedActivityIdIn;
  }


  public HistoricProcessInstanceQueryDto activeActivityIdIn(List<String> activeActivityIdIn) {
    
    this.activeActivityIdIn = activeActivityIdIn;
    return this;
  }

  public HistoricProcessInstanceQueryDto addActiveActivityIdInItem(String activeActivityIdInItem) {
    if (this.activeActivityIdIn == null) {
      this.activeActivityIdIn = new ArrayList<String>();
    }
    this.activeActivityIdIn.add(activeActivityIdInItem);
    return this;
  }

   /**
   * Restrict to instances that have an active activity with one of given ids.
   * @return activeActivityIdIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict to instances that have an active activity with one of given ids.")
  @JsonProperty(JSON_PROPERTY_ACTIVE_ACTIVITY_ID_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getActiveActivityIdIn() {
    return activeActivityIdIn;
  }


  public void setActiveActivityIdIn(List<String> activeActivityIdIn) {
    this.activeActivityIdIn = activeActivityIdIn;
  }


  public HistoricProcessInstanceQueryDto active(Boolean active) {
    this.active = JsonNullable.<Boolean>of(active);
    
    return this;
  }

   /**
   * Restrict to instances that are active.
   * @return active
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict to instances that are active.")
  @JsonIgnore

  public Boolean getActive() {
        return active.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getActive_JsonNullable() {
    return active;
  }
  
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  public void setActive_JsonNullable(JsonNullable<Boolean> active) {
    this.active = active;
  }

  public void setActive(Boolean active) {
    this.active = JsonNullable.<Boolean>of(active);
  }


  public HistoricProcessInstanceQueryDto suspended(Boolean suspended) {
    this.suspended = JsonNullable.<Boolean>of(suspended);
    
    return this;
  }

   /**
   * Restrict to instances that are suspended.
   * @return suspended
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict to instances that are suspended.")
  @JsonIgnore

  public Boolean getSuspended() {
        return suspended.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SUSPENDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getSuspended_JsonNullable() {
    return suspended;
  }
  
  @JsonProperty(JSON_PROPERTY_SUSPENDED)
  public void setSuspended_JsonNullable(JsonNullable<Boolean> suspended) {
    this.suspended = suspended;
  }

  public void setSuspended(Boolean suspended) {
    this.suspended = JsonNullable.<Boolean>of(suspended);
  }


  public HistoricProcessInstanceQueryDto completed(Boolean completed) {
    this.completed = JsonNullable.<Boolean>of(completed);
    
    return this;
  }

   /**
   * Restrict to instances that are completed.
   * @return completed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict to instances that are completed.")
  @JsonIgnore

  public Boolean getCompleted() {
        return completed.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_COMPLETED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getCompleted_JsonNullable() {
    return completed;
  }
  
  @JsonProperty(JSON_PROPERTY_COMPLETED)
  public void setCompleted_JsonNullable(JsonNullable<Boolean> completed) {
    this.completed = completed;
  }

  public void setCompleted(Boolean completed) {
    this.completed = JsonNullable.<Boolean>of(completed);
  }


  public HistoricProcessInstanceQueryDto externallyTerminated(Boolean externallyTerminated) {
    this.externallyTerminated = JsonNullable.<Boolean>of(externallyTerminated);
    
    return this;
  }

   /**
   * Restrict to instances that are externallyTerminated.
   * @return externallyTerminated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict to instances that are externallyTerminated.")
  @JsonIgnore

  public Boolean getExternallyTerminated() {
        return externallyTerminated.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXTERNALLY_TERMINATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getExternallyTerminated_JsonNullable() {
    return externallyTerminated;
  }
  
  @JsonProperty(JSON_PROPERTY_EXTERNALLY_TERMINATED)
  public void setExternallyTerminated_JsonNullable(JsonNullable<Boolean> externallyTerminated) {
    this.externallyTerminated = externallyTerminated;
  }

  public void setExternallyTerminated(Boolean externallyTerminated) {
    this.externallyTerminated = JsonNullable.<Boolean>of(externallyTerminated);
  }


  public HistoricProcessInstanceQueryDto internallyTerminated(Boolean internallyTerminated) {
    this.internallyTerminated = JsonNullable.<Boolean>of(internallyTerminated);
    
    return this;
  }

   /**
   * Restrict to instances that are internallyTerminated.
   * @return internallyTerminated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Restrict to instances that are internallyTerminated.")
  @JsonIgnore

  public Boolean getInternallyTerminated() {
        return internallyTerminated.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INTERNALLY_TERMINATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getInternallyTerminated_JsonNullable() {
    return internallyTerminated;
  }
  
  @JsonProperty(JSON_PROPERTY_INTERNALLY_TERMINATED)
  public void setInternallyTerminated_JsonNullable(JsonNullable<Boolean> internallyTerminated) {
    this.internallyTerminated = internallyTerminated;
  }

  public void setInternallyTerminated(Boolean internallyTerminated) {
    this.internallyTerminated = JsonNullable.<Boolean>of(internallyTerminated);
  }


  public HistoricProcessInstanceQueryDto variables(List<VariableQueryParameterDto> variables) {
    
    this.variables = variables;
    return this;
  }

  public HistoricProcessInstanceQueryDto addVariablesItem(VariableQueryParameterDto variablesItem) {
    if (this.variables == null) {
      this.variables = new ArrayList<VariableQueryParameterDto>();
    }
    this.variables.add(variablesItem);
    return this;
  }

   /**
   * A JSON array to only include process instances that have/had variables with certain values. The array consists of objects with the three properties &#x60;name&#x60;, &#x60;operator&#x60; and &#x60;value&#x60;. &#x60;name&#x60; (String) is the variable name, &#x60;operator&#x60; (String) is the comparison operator to be used and &#x60;value&#x60; the variable value. &#x60;value&#x60; may be String, Number or Boolean. Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.
   * @return variables
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A JSON array to only include process instances that have/had variables with certain values. The array consists of objects with the three properties `name`, `operator` and `value`. `name` (String) is the variable name, `operator` (String) is the comparison operator to be used and `value` the variable value. `value` may be String, Number or Boolean. Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.")
  @JsonProperty(JSON_PROPERTY_VARIABLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VariableQueryParameterDto> getVariables() {
    return variables;
  }


  public void setVariables(List<VariableQueryParameterDto> variables) {
    this.variables = variables;
  }


  public HistoricProcessInstanceQueryDto variableNamesIgnoreCase(Boolean variableNamesIgnoreCase) {
    this.variableNamesIgnoreCase = JsonNullable.<Boolean>of(variableNamesIgnoreCase);
    
    return this;
  }

   /**
   * Match all variable names provided in variables case-insensitively. If set to true variableName and variablename are treated as equal.
   * @return variableNamesIgnoreCase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Match all variable names provided in variables case-insensitively. If set to true variableName and variablename are treated as equal.")
  @JsonIgnore

  public Boolean getVariableNamesIgnoreCase() {
        return variableNamesIgnoreCase.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VARIABLE_NAMES_IGNORE_CASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getVariableNamesIgnoreCase_JsonNullable() {
    return variableNamesIgnoreCase;
  }
  
  @JsonProperty(JSON_PROPERTY_VARIABLE_NAMES_IGNORE_CASE)
  public void setVariableNamesIgnoreCase_JsonNullable(JsonNullable<Boolean> variableNamesIgnoreCase) {
    this.variableNamesIgnoreCase = variableNamesIgnoreCase;
  }

  public void setVariableNamesIgnoreCase(Boolean variableNamesIgnoreCase) {
    this.variableNamesIgnoreCase = JsonNullable.<Boolean>of(variableNamesIgnoreCase);
  }


  public HistoricProcessInstanceQueryDto variableValuesIgnoreCase(Boolean variableValuesIgnoreCase) {
    this.variableValuesIgnoreCase = JsonNullable.<Boolean>of(variableValuesIgnoreCase);
    
    return this;
  }

   /**
   * Match all variable values provided in variables case-insensitively. If set to true variableValue and variablevalue are treated as equal.
   * @return variableValuesIgnoreCase
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Match all variable values provided in variables case-insensitively. If set to true variableValue and variablevalue are treated as equal.")
  @JsonIgnore

  public Boolean getVariableValuesIgnoreCase() {
        return variableValuesIgnoreCase.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VARIABLE_VALUES_IGNORE_CASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getVariableValuesIgnoreCase_JsonNullable() {
    return variableValuesIgnoreCase;
  }
  
  @JsonProperty(JSON_PROPERTY_VARIABLE_VALUES_IGNORE_CASE)
  public void setVariableValuesIgnoreCase_JsonNullable(JsonNullable<Boolean> variableValuesIgnoreCase) {
    this.variableValuesIgnoreCase = variableValuesIgnoreCase;
  }

  public void setVariableValuesIgnoreCase(Boolean variableValuesIgnoreCase) {
    this.variableValuesIgnoreCase = JsonNullable.<Boolean>of(variableValuesIgnoreCase);
  }


  public HistoricProcessInstanceQueryDto orQueries(List<HistoricProcessInstanceQueryDto> orQueries) {
    
    this.orQueries = orQueries;
    return this;
  }

  public HistoricProcessInstanceQueryDto addOrQueriesItem(HistoricProcessInstanceQueryDto orQueriesItem) {
    if (this.orQueries == null) {
      this.orQueries = new ArrayList<HistoricProcessInstanceQueryDto>();
    }
    this.orQueries.add(orQueriesItem);
    return this;
  }

   /**
   * A JSON array of nested historic process instance queries with OR semantics. A process instance matches a nested query if it fulfills at least one of the query&#39;s predicates. With multiple nested queries, a process instance must fulfill at least one predicate of each query (Conjunctive Normal Form). All process instance query properties can be used except for: sorting See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
   * @return orQueries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A JSON array of nested historic process instance queries with OR semantics. A process instance matches a nested query if it fulfills at least one of the query's predicates. With multiple nested queries, a process instance must fulfill at least one predicate of each query (Conjunctive Normal Form). All process instance query properties can be used except for: sorting See the [User Guide](https://docs.camunda.org/manual/7.13/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.")
  @JsonProperty(JSON_PROPERTY_OR_QUERIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<HistoricProcessInstanceQueryDto> getOrQueries() {
    return orQueries;
  }


  public void setOrQueries(List<HistoricProcessInstanceQueryDto> orQueries) {
    this.orQueries = orQueries;
  }


  public HistoricProcessInstanceQueryDto sorting(List<HistoricProcessInstanceQueryDtoSorting> sorting) {
    
    this.sorting = sorting;
    return this;
  }

  public HistoricProcessInstanceQueryDto addSortingItem(HistoricProcessInstanceQueryDtoSorting sortingItem) {
    if (this.sorting == null) {
      this.sorting = new ArrayList<HistoricProcessInstanceQueryDtoSorting>();
    }
    this.sorting.add(sortingItem);
    return this;
  }

   /**
   * Apply sorting of the result
   * @return sorting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Apply sorting of the result")
  @JsonProperty(JSON_PROPERTY_SORTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<HistoricProcessInstanceQueryDtoSorting> getSorting() {
    return sorting;
  }


  public void setSorting(List<HistoricProcessInstanceQueryDtoSorting> sorting) {
    this.sorting = sorting;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistoricProcessInstanceQueryDto historicProcessInstanceQueryDto = (HistoricProcessInstanceQueryDto) o;
    return Objects.equals(this.processInstanceId, historicProcessInstanceQueryDto.processInstanceId) &&
        Objects.equals(this.processInstanceIds, historicProcessInstanceQueryDto.processInstanceIds) &&
        Objects.equals(this.processDefinitionId, historicProcessInstanceQueryDto.processDefinitionId) &&
        Objects.equals(this.processDefinitionKey, historicProcessInstanceQueryDto.processDefinitionKey) &&
        Objects.equals(this.processDefinitionKeyIn, historicProcessInstanceQueryDto.processDefinitionKeyIn) &&
        Objects.equals(this.processDefinitionName, historicProcessInstanceQueryDto.processDefinitionName) &&
        Objects.equals(this.processDefinitionNameLike, historicProcessInstanceQueryDto.processDefinitionNameLike) &&
        Objects.equals(this.processDefinitionKeyNotIn, historicProcessInstanceQueryDto.processDefinitionKeyNotIn) &&
        Objects.equals(this.processInstanceBusinessKey, historicProcessInstanceQueryDto.processInstanceBusinessKey) &&
        Objects.equals(this.processInstanceBusinessKeyLike, historicProcessInstanceQueryDto.processInstanceBusinessKeyLike) &&
        Objects.equals(this.rootProcessInstances, historicProcessInstanceQueryDto.rootProcessInstances) &&
        Objects.equals(this.finished, historicProcessInstanceQueryDto.finished) &&
        Objects.equals(this.unfinished, historicProcessInstanceQueryDto.unfinished) &&
        Objects.equals(this.withIncidents, historicProcessInstanceQueryDto.withIncidents) &&
        Objects.equals(this.withRootIncidents, historicProcessInstanceQueryDto.withRootIncidents) &&
        Objects.equals(this.incidentType, historicProcessInstanceQueryDto.incidentType) &&
        Objects.equals(this.incidentStatus, historicProcessInstanceQueryDto.incidentStatus) &&
        Objects.equals(this.incidentMessage, historicProcessInstanceQueryDto.incidentMessage) &&
        Objects.equals(this.incidentMessageLike, historicProcessInstanceQueryDto.incidentMessageLike) &&
        Objects.equals(this.startedBefore, historicProcessInstanceQueryDto.startedBefore) &&
        Objects.equals(this.startedAfter, historicProcessInstanceQueryDto.startedAfter) &&
        Objects.equals(this.finishedBefore, historicProcessInstanceQueryDto.finishedBefore) &&
        Objects.equals(this.finishedAfter, historicProcessInstanceQueryDto.finishedAfter) &&
        Objects.equals(this.executedActivityAfter, historicProcessInstanceQueryDto.executedActivityAfter) &&
        Objects.equals(this.executedActivityBefore, historicProcessInstanceQueryDto.executedActivityBefore) &&
        Objects.equals(this.executedJobAfter, historicProcessInstanceQueryDto.executedJobAfter) &&
        Objects.equals(this.executedJobBefore, historicProcessInstanceQueryDto.executedJobBefore) &&
        Objects.equals(this.startedBy, historicProcessInstanceQueryDto.startedBy) &&
        Objects.equals(this.superProcessInstanceId, historicProcessInstanceQueryDto.superProcessInstanceId) &&
        Objects.equals(this.subProcessInstanceId, historicProcessInstanceQueryDto.subProcessInstanceId) &&
        Objects.equals(this.superCaseInstanceId, historicProcessInstanceQueryDto.superCaseInstanceId) &&
        Objects.equals(this.subCaseInstanceId, historicProcessInstanceQueryDto.subCaseInstanceId) &&
        Objects.equals(this.caseInstanceId, historicProcessInstanceQueryDto.caseInstanceId) &&
        Objects.equals(this.tenantIdIn, historicProcessInstanceQueryDto.tenantIdIn) &&
        Objects.equals(this.withoutTenantId, historicProcessInstanceQueryDto.withoutTenantId) &&
        Objects.equals(this.executedActivityIdIn, historicProcessInstanceQueryDto.executedActivityIdIn) &&
        Objects.equals(this.activeActivityIdIn, historicProcessInstanceQueryDto.activeActivityIdIn) &&
        Objects.equals(this.active, historicProcessInstanceQueryDto.active) &&
        Objects.equals(this.suspended, historicProcessInstanceQueryDto.suspended) &&
        Objects.equals(this.completed, historicProcessInstanceQueryDto.completed) &&
        Objects.equals(this.externallyTerminated, historicProcessInstanceQueryDto.externallyTerminated) &&
        Objects.equals(this.internallyTerminated, historicProcessInstanceQueryDto.internallyTerminated) &&
        Objects.equals(this.variables, historicProcessInstanceQueryDto.variables) &&
        Objects.equals(this.variableNamesIgnoreCase, historicProcessInstanceQueryDto.variableNamesIgnoreCase) &&
        Objects.equals(this.variableValuesIgnoreCase, historicProcessInstanceQueryDto.variableValuesIgnoreCase) &&
        Objects.equals(this.orQueries, historicProcessInstanceQueryDto.orQueries) &&
        Objects.equals(this.sorting, historicProcessInstanceQueryDto.sorting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(processInstanceId, processInstanceIds, processDefinitionId, processDefinitionKey, processDefinitionKeyIn, processDefinitionName, processDefinitionNameLike, processDefinitionKeyNotIn, processInstanceBusinessKey, processInstanceBusinessKeyLike, rootProcessInstances, finished, unfinished, withIncidents, withRootIncidents, incidentType, incidentStatus, incidentMessage, incidentMessageLike, startedBefore, startedAfter, finishedBefore, finishedAfter, executedActivityAfter, executedActivityBefore, executedJobAfter, executedJobBefore, startedBy, superProcessInstanceId, subProcessInstanceId, superCaseInstanceId, subCaseInstanceId, caseInstanceId, tenantIdIn, withoutTenantId, executedActivityIdIn, activeActivityIdIn, active, suspended, completed, externallyTerminated, internallyTerminated, variables, variableNamesIgnoreCase, variableValuesIgnoreCase, orQueries, sorting);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistoricProcessInstanceQueryDto {\n");
    sb.append("    processInstanceId: ").append(toIndentedString(processInstanceId)).append("\n");
    sb.append("    processInstanceIds: ").append(toIndentedString(processInstanceIds)).append("\n");
    sb.append("    processDefinitionId: ").append(toIndentedString(processDefinitionId)).append("\n");
    sb.append("    processDefinitionKey: ").append(toIndentedString(processDefinitionKey)).append("\n");
    sb.append("    processDefinitionKeyIn: ").append(toIndentedString(processDefinitionKeyIn)).append("\n");
    sb.append("    processDefinitionName: ").append(toIndentedString(processDefinitionName)).append("\n");
    sb.append("    processDefinitionNameLike: ").append(toIndentedString(processDefinitionNameLike)).append("\n");
    sb.append("    processDefinitionKeyNotIn: ").append(toIndentedString(processDefinitionKeyNotIn)).append("\n");
    sb.append("    processInstanceBusinessKey: ").append(toIndentedString(processInstanceBusinessKey)).append("\n");
    sb.append("    processInstanceBusinessKeyLike: ").append(toIndentedString(processInstanceBusinessKeyLike)).append("\n");
    sb.append("    rootProcessInstances: ").append(toIndentedString(rootProcessInstances)).append("\n");
    sb.append("    finished: ").append(toIndentedString(finished)).append("\n");
    sb.append("    unfinished: ").append(toIndentedString(unfinished)).append("\n");
    sb.append("    withIncidents: ").append(toIndentedString(withIncidents)).append("\n");
    sb.append("    withRootIncidents: ").append(toIndentedString(withRootIncidents)).append("\n");
    sb.append("    incidentType: ").append(toIndentedString(incidentType)).append("\n");
    sb.append("    incidentStatus: ").append(toIndentedString(incidentStatus)).append("\n");
    sb.append("    incidentMessage: ").append(toIndentedString(incidentMessage)).append("\n");
    sb.append("    incidentMessageLike: ").append(toIndentedString(incidentMessageLike)).append("\n");
    sb.append("    startedBefore: ").append(toIndentedString(startedBefore)).append("\n");
    sb.append("    startedAfter: ").append(toIndentedString(startedAfter)).append("\n");
    sb.append("    finishedBefore: ").append(toIndentedString(finishedBefore)).append("\n");
    sb.append("    finishedAfter: ").append(toIndentedString(finishedAfter)).append("\n");
    sb.append("    executedActivityAfter: ").append(toIndentedString(executedActivityAfter)).append("\n");
    sb.append("    executedActivityBefore: ").append(toIndentedString(executedActivityBefore)).append("\n");
    sb.append("    executedJobAfter: ").append(toIndentedString(executedJobAfter)).append("\n");
    sb.append("    executedJobBefore: ").append(toIndentedString(executedJobBefore)).append("\n");
    sb.append("    startedBy: ").append(toIndentedString(startedBy)).append("\n");
    sb.append("    superProcessInstanceId: ").append(toIndentedString(superProcessInstanceId)).append("\n");
    sb.append("    subProcessInstanceId: ").append(toIndentedString(subProcessInstanceId)).append("\n");
    sb.append("    superCaseInstanceId: ").append(toIndentedString(superCaseInstanceId)).append("\n");
    sb.append("    subCaseInstanceId: ").append(toIndentedString(subCaseInstanceId)).append("\n");
    sb.append("    caseInstanceId: ").append(toIndentedString(caseInstanceId)).append("\n");
    sb.append("    tenantIdIn: ").append(toIndentedString(tenantIdIn)).append("\n");
    sb.append("    withoutTenantId: ").append(toIndentedString(withoutTenantId)).append("\n");
    sb.append("    executedActivityIdIn: ").append(toIndentedString(executedActivityIdIn)).append("\n");
    sb.append("    activeActivityIdIn: ").append(toIndentedString(activeActivityIdIn)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    externallyTerminated: ").append(toIndentedString(externallyTerminated)).append("\n");
    sb.append("    internallyTerminated: ").append(toIndentedString(internallyTerminated)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    variableNamesIgnoreCase: ").append(toIndentedString(variableNamesIgnoreCase)).append("\n");
    sb.append("    variableValuesIgnoreCase: ").append(toIndentedString(variableValuesIgnoreCase)).append("\n");
    sb.append("    orQueries: ").append(toIndentedString(orQueries)).append("\n");
    sb.append("    sorting: ").append(toIndentedString(sorting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

