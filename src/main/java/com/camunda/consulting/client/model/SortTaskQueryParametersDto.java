/*
 * Camunda BPM REST API
 * OpenApi Spec for Camunda BPM REST API.
 *
 * The version of the OpenAPI document: 7.13.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.camunda.consulting.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * Mandatory when &#x60;sortBy&#x60; is one of the following values: &#x60;processVariable&#x60;, &#x60;executionVariable&#x60;, &#x60;taskVariable&#x60;, &#x60;caseExecutionVariable&#x60; or &#x60;caseInstanceVariable&#x60;. Must be a JSON object with the properties &#x60;variable&#x60; and &#x60;type&#x60; where &#x60;variable&#x60; is a variable name and &#x60;type&#x60; is the name of a variable value type.
 */
@ApiModel(description = "Mandatory when `sortBy` is one of the following values: `processVariable`, `executionVariable`, `taskVariable`, `caseExecutionVariable` or `caseInstanceVariable`. Must be a JSON object with the properties `variable` and `type` where `variable` is a variable name and `type` is the name of a variable value type.")
@JsonPropertyOrder({
  SortTaskQueryParametersDto.JSON_PROPERTY_VARIABLE,
  SortTaskQueryParametersDto.JSON_PROPERTY_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-09-20T14:06:02.786934+02:00[Europe/Berlin]")
public class SortTaskQueryParametersDto {
  public static final String JSON_PROPERTY_VARIABLE = "variable";
  private String variable;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;


  public SortTaskQueryParametersDto variable(String variable) {
    
    this.variable = variable;
    return this;
  }

   /**
   * The name of the variable to sort by.
   * @return variable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the variable to sort by.")
  @JsonProperty(JSON_PROPERTY_VARIABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVariable() {
    return variable;
  }


  public void setVariable(String variable) {
    this.variable = variable;
  }


  public SortTaskQueryParametersDto type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The name of the type of the variable value.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the type of the variable value.")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SortTaskQueryParametersDto sortTaskQueryParametersDto = (SortTaskQueryParametersDto) o;
    return Objects.equals(this.variable, sortTaskQueryParametersDto.variable) &&
        Objects.equals(this.type, sortTaskQueryParametersDto.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(variable, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SortTaskQueryParametersDto {\n");
    sb.append("    variable: ").append(toIndentedString(variable)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

